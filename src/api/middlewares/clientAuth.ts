import { config } from "../../config/env";
import { Request, Response, NextFunction } from "express";
import jwt from "jsonwebtoken";
import { UserClaims } from "../dtos/auth.dto";

/**
 * Middleware to authenticate requests from the mobile app. accepts a JWT Bearer token in the Authorization header
 * In production, this would authorize against the JWT provided by the mobile app, with the token being generated by the core server
 * @param req - The request object
 * @param res - The response object
 * @param next - The next function in the middleware chain
 */
export const clientAuthMiddleware = (
  req: Request,
  res: Response,
  next: NextFunction,
) => {
  const authHeader = req.headers.authorization;
  if (!authHeader) {
    return res.status(401).json({ message: "Missing Authorization header" });
  }
  const token = authHeader.split(" ")[1];
  try {
    const decoded = jwt.verify(token, config.auth.clientSecret) as UserClaims;
    req.user = decoded;
    next();
  } catch (error) {
    return res.status(401).json({ message: "Invalid token from server" });
  }
};
